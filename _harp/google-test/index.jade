extends ../_shared/_base

block head
    title Google Sample Excercises

block content
    p.bigger The two prototypes requested:
        br
        a(href="album") Photo Gallery
        br
        a(href="leftnav") Left Navigation
    h2 
        a(href="album") Photo Gallery
    p This prototype was built using AngularJS, Bootstrap, and jQuery.
    p My original goal with this prototype was to make a clear transition between the grid state and the display state, and to accommodate swipe to navigate in the detail state. I started off attempting to use only CSS transitions to avoid loading jQuery. Unfortunately, the transitions I wanted for opening the detail viewer (gradually increasing the size of the image until it fills the screen) and for swiping just a little bit were not possible using just CSS transitions. The rest are still CSS transitions: fade in/out of the detail view, the full swipe in the detail view, and hiding/showing the controls in the detail view.
    p I chose Angular because I knew I wanted to use animations to highlight the connectedness of the UI elements, and I believe Angular offers the most effective way to include animations. The zoom in animation is probably the most important since it clearly communicates which image is being opened for full screen. Also important is the image swipe animation, even if the user clicks the left/right navigation arrows. Seeing this animation gives the user an idea that the images area is swipeable, and communicates that they can try to swipe it themselves.
    p I debated using a route to update the URL based on which image the user was looking at, but opted not to. I decided that on reload, a user is much more likely to want to see the grid than the last image they happened to see. As an alternative, I see the share button linking to a permanent URL for the image, which can be saved.
    p Another major goal for this project was to have infinite swipe in the detail view in both directions without having every full size picture in the HTML. I accomplished this by using a 3 element array combined with an ng-repeat directive so that only the active, prior, and next images are rendered in the DOM. By intelligently managing this array, I can leverage the built-in Angular events for adding and removing elements for animation purposes, and limit the number of full-size images loaded at once.
    p This prototype can accommodate any screen size, and the grid view will always remain centered with a wrap at the appropriate screen edge. It is, however, targeted at mobile devices in a portrait orientation.
    p One deviation from the mockup that I made is the addition of left/right navigation arrows. I did this from experience seeing users struggle with slideshow interfaces like this with no discernable navigation buttons. For experienced users, a tap on the current image is enough to hide all detail controls, so they can scroll the images with no visual clutter.
    p As both of these prototypes are targeted at mobile, I would definitely prefer to precompile all the templates, compress all the JS files together, and minify and uglify them. However, I have left the files separated without minification for viewing ease.
    p Other areas for improvement in preparation for a real deployment would include: using pre-shrunk thumbnails instead of the full sized images in the grid view, incorporating logic for portrait oriented images and landscape oriented devices, and dynamic loading of additional images as the user scrolls down the page to speed up initial page load.
    h2
        a(href="leftnav") Left Navigation
    p This prototype was built using AngularJS and Bootstrap.
    p I was able to accomplish my goal of only using CSS transitions in this prototype and avoided loading jQuery entirely. Again, I went with Angular for its animation hooks. Bootstrap I included primarily for its icon set and some basic page scaffolding.
    p It was important to me to allow the user to open and close the menu by swiping basically anywhere on screen while also offering the menu button to do it as well. For users not familiar with a swipe based menu, clicking the button and seeing the menu slide in gives a hint that it is possible to drag the menu out with a swipe.
    p Another UX decision I made was to not automatically close the left navigation upon selecting a new page. I see some merit to either approach, but fundamentally, if the user makes a wrong choice, I felt that forcing them to reopen the left navigation to correct it was too punishing. Conversely, the menu is not difficult to close for users who have arrived at their correct page. User testing could determine if the majority of users simply close the menu upon making their first selection, thus pointing to auto-closing the menu.

